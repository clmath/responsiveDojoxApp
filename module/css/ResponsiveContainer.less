@-ms-viewport {
	width:device-width; 
}

@widget: responsiveContainer;
@slider: slider;
@maxPanes: 3;
@ANIMATION_DURATION: 0.7s;
@ANIMATION_STYLE:  ease-in-out;
@slidePaneWidth: 275px;
@widthPartialView: (@slidePaneWidth+40); // 40 is the visible part of the view under the slide

@MQBreakpoint1: 400px;
@MQBreakpoint2: 800px;

@maxValue: 0;
.max (@a; @b) when (@a >= @b) { @maxValue: @a }
.max (@a; @b) when (@a < @b) { @maxValue: @b }

.borderBox() {
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
.transition() {
	-moz-transition: all @ANIMATION_DURATION @ANIMATION_STYLE;
	-webkit-transition: all @ANIMATION_DURATION @ANIMATION_STYLE;
	-o-transition: all @ANIMATION_DURATION @ANIMATION_STYLE;
	transition: all @ANIMATION_DURATION @ANIMATION_STYLE;
}
.transform(...) {
	-moz-transform: @arguments;
	-webkit-transform: @arguments;
	-o-transform: @arguments;
	-ms-transform: @arguments;
	transform: @arguments;
}
.HWAcceleration(){//Only for iThings
	-webkit-backface-visibility: hidden;
	-moz-backface-visibility: hidden;
	-ms-backface-visibility: hidden;
	backface-visibility: hidden;

	-webkit-perspective: 1000;
	-moz-perspective: 1000;
	-ms-perspective: 1000;
	perspective: 1000;
}

#@{widget} {
	// Scope variable : @i,
	position: absolute; left:0; top:0; right:0; bottom:0;
	overflow: hidden;
  	
	.view {
		float:left;
		.borderBox();
		border-right: 1px solid black;
		overflow: auto;
		display:block;
		width: (100%/(@maxPanes+1));
		height: 100%;
		.HWAcceleration();
	}

	.backButton{
		visibility: hidden;
	}
	.backButton.moreThanMaxPanes{
		visibility: visible!important;
	}
	
	>.view{display:none;}
	
	#multiPanes {
		overflow:hidden;
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 9100;
		.HWAcceleration();
		
		#@{slider} {
			.HWAcceleration();
			.borderBox();
			height: 100%;
		}
		
		#@{slider} > .view:last-child{
			border: none;
		}
		
		&.overlayed {
			min-width: 300px;
		}
		
		&.overlayed.left {
			left: @slidePaneWidth;
		}
		
		&.overlayed.right {
			right: @slidePaneWidth;
		}	
	}
	
	#sidePane {
		box-sizing: border-box;
		height: 100%;
		position: absolute;
		top: 0;
		bottom: 0;
		width: @slidePaneWidth;
		z-index: 9001;
	
		display: none;

		.HWAcceleration();		
		.view {
			width: 100%;
		}
	}
	#sidePane.left{
		left: 0;
	}
	#sidePane.right{
		right: 0;
	}
	
	/* MediaQueries matching */
	#MQmatch{
		position: fixed;
		top: -3000px;
		left: -3000px;
		width:1px;
		height:1px;
		visibility: hidden;
	}
		
	/* Animations */

	/* generating the class needed for the transitions */
	@i: 1;
	.while (@i) when (@i =< @maxPanes) {
		#@{slider}.col@{i} {
			@tmp: (100*(@maxPanes+1)/@i);
			width: ~"@{tmp}%";
		}	
		.while(@i+1);
	}
	.while(@i);


	#@{slider}.slideTransition {
		.transform(translateX((-100%/(@maxPanes+1))));
		.transition();
	}

	#@{slider}.widthTransition {
		.transition();
	}
	
	#multiPanes.overlayed.sideTransition {
		.transition();
		z-index: 9100;
	}

	#multiPanes.overlayed.sideTransition.left {
		border-left: solid black 1px;
	}
	
	#multiPanes.overlayed.sideTransition.left {
		border-right: solid black 1px;
	}


	#sidePane.beforeSideSlide.left {
		.transform(translateX(-100%));
	}
	#sidePane.beforeSideSlide.right {
		.transform(translateX(100%));
	}
	
	#sidePane.sideSlideTransition {
		.transition();
		.transform(translateX(0)) !important;
		z-index: 9100;
	}

	/* MediaQueries when multiPanes is NOT overlayed*/
	@media (max-width: @MQBreakpoint2) and (min-width: @MQBreakpoint1) {
		// Scope variables : @i
		
		.backButton.moreThanTwoPanes, .backButton.moreThanMaxPanes{
			visibility: visible!important;
		}
		
		#MQmatch {
			width: 2px;
		}
		
		#@{slider} > .view {
			display: none;
		}
		
		#@{slider}.slideTransition > .view:nth-last-child(-n+3) {
			display: block;
		}
		
		#@{slider} > .view:nth-last-child(-n+2) {
			display: block;
		}
		
		@i: 3;
		.while (@i) when (@i =< @maxPanes) {
			#@{slider}.col@{i} {
				@tmp: (100*(@maxPanes+1)/2);
				width: ~"@{tmp}%";
			}
			.while(@i+1);
		}
		.while(@i);
	}

	@media (max-width: @MQBreakpoint1){
		// Scope variables : @i
		
		.backButton.twoPanes, .backButton.moreThanTwoPanes, .backButton.moreThanMaxPanes{
			visibility: visible!important;
		}
		
		#MQmatch {
			width: 3px;
		}
		
		#@{slider} > .view {
			display: none;
		}
		
		#@{slider}.slideTransition > .view:nth-last-child(-n+2) {
			display: block;
		}
		
		#@{slider} > .view:last-child {
			display: block;
		}
		
		@i: 2;
		.while (@i) when (@i =< @maxPanes) {
			#@{slider}.col@{i} {
				@tmp: (100*(@maxPanes+1)/1);
				width: ~"@{tmp}%";
			}
			.while(@i+1);
		}
		.while(@i);
	}

	/* MediaQueries when multiPanes IS overlayed*/
	.overlayed {
		// Scope variables :@tmpMax
		
		@tmpMax: (@MQBreakpoint2+@slidePaneWidth);
		
		@media (max-width: @tmpMax) and (min-width: @MQBreakpoint2) {
			// Scope variables : @i
			
			#MQmatch {
				width: 2px;
			}
			
			#@{slider} > .view {
				display: none;
			}
			
			#@{slider}.slideTransition > .view:nth-last-child(-n+3) {
				display: block;
			}
			
			#@{slider} > .view:nth-last-child(-n+2) {
				display: block;
			}

			@i: 3;
			.while (@i) when (@i =< @maxPanes) {
				#@{slider}.col@{i} {
					@tmp: (100*(@maxPanes+1)/2);
					width: ~"@{tmp}%";
				}
				.while(@i+1);
			}
			.while(@i);
		}
		
		.max(@MQBreakpoint1,@widthPartialView);
		@media (max-width: @maxValue){
			// Scope variables : @i
			
			#MQmatch {
				width: 3px;
			}
			
			#@{slider} > .view {
				display: none;
			}
			
			#@{slider}.slideTransition > .view:nth-last-child(-n+2) {
				display: block;
			}
			
			#@{slider} > .view:last-child {
				display: block;
			}
			
			@i: 2;
			.while (@i) when (@i =< @maxPanes) {
				#@{slider}.col@{i} {
					@tmp: (100*(@maxPanes+1)/1);
					width: ~"@{tmp}%";
				}
				.while(@i+1);
			}
			.while(@i);
		}

	}
	
	/* Mediaqueries for the portrait tablet-like sliding pane */
	@media (min-width: @MQBreakpoint1) and (max-width: @MQBreakpoint2) {
		#MQmatch{
			height: 2px;
		}

		#multiPanes.overlayed {
			z-index: 0 !important;
		}

		#multiPanes.overlayed.left {
			margin-left: 0 !important;
			left: 0 !important;
		}

		#multiPanes.overlayed.right {
			margin-right: 0 !important;
			right: 0 !important;
		}

		#sidePane {
			box-shadow: 0px 0px 10px 2px #000;
		}
	}

/* Mediaqueries for the portrait tablet-like sliding pane */
	@media (min-width: @widthPartialView) and (max-width: @MQBreakpoint1) {
		#multiPanes.overlayed.left {
			right: -275px!important;
		}

		#multiPanes.overlayed.right {
			left: -275px!important;
		}
	}

	/* Mediaqueries for the phone-like partial sliding pane */
	@media (max-width: @widthPartialView) {
		#multiPanes.overlayed {
			position: absolute !important;
		}

		#multiPanes.overlayed.left {
			right: -260px !important;
			left: auto !important;
		}

		#multiPanes.overlayed.right {
			left: -260px !important;
			right: auto !important;
		}

		#sidePane {
			width: auto !important;
			box-shadow: none;
		}
		#sidePane.left {
			right: 40px;
		}
		#sidePane.right {
			left: 40px;
		}
	}
}

/* TODO Ttable of the MQmatch div state with the corresponding meaning */


/* for version hosted on github */
.mblBackground {
  background-color: #c5ccd3;
} 



@keyframes shake{ 
0% { transform: translateX(4px); } 
50% { transform: translateX(-4px); }
100% { transform: translateX(4px); }  
} 

@-moz-keyframes shake{ 
0% { -moz-transform: translateX(4px); } 
50% { -moz-transform: translateX(-4px); } 
100% { -moz-transform: translateX(4px); }  
} 

@-webkit-keyframes shake { 
0% { -webkit-transform: translateX(4px); } 
50% { -webkit-transform: translateX(-4px); } 
100% { -webkit-transform: translateX(4px); }  
} 

.shake{ 
animation-name: shake; 
animation-duration: 0.1s; 
transform-origin:50% 50%; 
animation-iteration-count: 3; 
animation-timing-function: linear; 

-moz-animation-name: shake; 
-moz-animation-duration: 0.1s; 
-moz-transform-origin:50% 50%; 
-moz-animation-iteration-count: 3; 
-moz-animation-timing-function: linear; 

-webkit-animation-name: shake; 
-webkit-animation-duration: 0.1s; 
-webkit-transform-origin:50% 50%; 
-webkit-animation-iteration-count: 3; 
-webkit-animation-timing-function: linear; 
}

